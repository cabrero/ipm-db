# --*-- coding: utf-8 --*--

import sys
import locale
import uuid
import couchdb 


# couchdb doc says:
#
# "Note that it is generally better to avoid saving documents with no
#  _id and instead generate document IDs on the client side. This is
#  due to the fact that the underlying HTTP POST method is not
#  idempotent, ..."
#
#  and
#
# "The save() method creates a document with a random ID generated by
#  CouchDB (which is not recommended)."
#
# so
# We assign an id during document instantiation, using uuid module.
#
# "uuid4() generates, as you said, a random UUID. The chance of
# a collision is really, really, really small."
# We'll live with it.


class CouchdbDAO(object):
    """
    DAO para CouchDB. Usa el api más "pythonic": la base de datos
    tiene una interface equivalente a un diccionario.
    """

    def __init__(self, db):
        self._db = db

    def insert(self, doc):
        """
        Añadir un documento a la BD.

        @param doc: El documento a insertar.
        @type  doc: CouchdbVO
        """
        self._db[doc.id] = doc
        print >>sys.stderr, u"INSERT({0}): {1}".format(self._db.name, doc).encode(locale.getpreferredencoding())

    def update(self, doc):
        """
        Actualizar un documento en la BD.

        @param doc: El documento a actualizar.
        @type  doc: CouchdbVO
        """
        self._db[doc.id] = doc
        print >>sys.stderr, u"UPDATE({0}): {1}".format(self._db.name, doc).encode(locale.getpreferredencoding())


    def delete(self, doc):
        """
        Borrar un documento de la BD.

        @param doc: El documento a borrar.
        @type  doc: CouchdbVO
        """
        del sel._db[doc.id]
        print >>sys.stderr, u"DELETE({0}): {1}".format(self._db.name, doc).encode(locale.getpreferredencoding())



    # @TODO findBy





class CouchdbVO(couchdb.client.Document):
    """
    Value Object para CouchDB.
    
    CouchDB maneja documentos que son listas de campos nombre,valor
    por lo que el mapping con los VOs es directo. El campo 'type' se
    usa para el tipo de objeto.
    """
    def __init__(self, **kwargs):
        couchdb.client.Document.__init__(self, **kwargs)
        self['_id']=uuid.uuid4().hex


class SubjectVO(CouchdbVO):
    """
    Asignaturas.
    """
    def __init__(self, aDescription, someTags):
        CouchdbVO.__init__(self,
                           type='Subject',
                           description=aDescription,
                           tags=someTags)

class EventVO(CouchdbVO):
    """
    Eventos.
    """
    def __init__(self, aDescription, aCreator, someTags, aDate):
        CouchdbVO.__init__(self,
                           type='Event',
                           description=aDescription,
                           tags=someTags,
                           creator=aCreator,
                           date=aDate.isoformat())

class UserVO(CouchdbVO):
    """
    Usuarios. Hay dos subtipos de usuarios: 'Student' y 'Teacher'.
    """
    def __init__(self, aSubtype, aDescription, someSubjects):
        CouchdbVO.__init__(self,
                           type='User',
                           subtype=aSubtype,
                           description=aDescription,
                           subjects=someSubjects)




